---

description: Build, tag and push Docker image for cross platform
 to remote registry [AWS ECR].

parameters:
  layer_caching:
    type: boolean
    default: false
    description: Whether to cache Docker layers.
  registry_provider:
    type: enum
    enum: ["aws", "docker"]
    default: "aws"
    description: Docker registry provider.
  configure_git:
    type: boolean
    default: false
    description: Whether to setup git credentials.
  image_context:
    type: string
    default: "."
    description: Docker local build context.
  image_file:
    type: string
    default: ""
    description: Docker local Dockerfile.
  image_name:
    type: string
    description: Docker local image name.
  image_platform:
    type: enum
    enum: ["linux/arm64", "linux/amd64", "linux/arm64,linux/amd64"]
    default: "linux/arm64,linux/amd64"
    description: Docker image platform.
  image_tag:
    type: string
    description: Docker remote image tag.
  image_tag_only:
    type: boolean
    default: false
    description: Whether to tag the Docker image only.
  slack_alert:
    type: boolean
    default: true
    description: Whether to send a Slack on failure.
  no_output_timeout:
    type: string
    default: "10m"
    description: Circleci no_output_timeout parameter.

steps:
  - docker_install_cli:
      layer_caching: << parameters.layer_caching >>
  - docker_configure_repo:
      registry_provider: << parameters.registry_provider >>
  - run:
      name: Create and provision Docker builder
      command: noosinv docker.configure
  - run:
      name: Build, tag and push Docker image
      no_output_timeout: << parameters.no_output_timeout >>
      command: >-
        if [ "<< parameters.registry_provider >>" = "aws" ]; then
          export NOOSINV_DOCKER_REPO=$AWS_ECR_URL
        elif [ "<< parameters.registry_provider >>" = "docker" ]; then
          export NOOSINV_DOCKER_REPO=$DOCKERHUB_USER
        fi

        set -- "$@" --context << parameters.image_context >>

        set -- "$@" --name << parameters.image_name >>

        if [ -n "<< parameters.image_file >>" ]; then
          set -- "$@" --file << parameters.image_file >>
        fi

        if << parameters.configure_git >>; then
          set -- "$@" --arg GITHUB_TOKEN
        fi

        set -- "$@" --platform << parameters.image_platform >>

        set -- "$@" --tag << parameters.image_tag >>

        if << parameters.image_tag_only >>; then
          set -- "$@" --tag-only
        fi

        noosinv docker.buildx "$@"
  - when:
      condition: << parameters.slack_alert >>
      steps:
        - slack-msg/notify:
            event: fail
            template: basic_fail_1
